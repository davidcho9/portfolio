In C++, std::vector is typically considered a poor choice for a sorted container because for every insertion, all subsequent values must be shifted to make room for it.  The net effect should be linear-time insertions.  Modern processors, however, can move whole blocks of memory at once. 

How efficient can a sorted vector be?  Implement one where you use binary search to quickly find the insertion position of a new value in the vector, and then use the vector member function insert (iterator, value) to place the new value into the vector (insert will efficiently adjust elements that need to be moved).  Graph the time your sorted vector takes as compared to std::multiset, which you already looked at in problem 3.  Again, you may use a language other than C++ as long as you pick equivalent data structures.